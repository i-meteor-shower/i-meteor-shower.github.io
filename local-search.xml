<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PAT甲级_1001(A+B Format)</title>
    <link href="/2024/12/26/PAT%E7%94%B2%E7%BA%A7_1001/"/>
    <url>/2024/12/26/PAT%E7%94%B2%E7%BA%A7_1001/</url>
    
    <content type="html"><![CDATA[<h4 id="1001-A-B格式"><a href="#1001-A-B格式" class="headerlink" title="1001 A+B格式"></a>1001 A+B格式</h4><p>计算a+b并且按照要求标准输出它们的和——-也就是说，数字必须三个一组用逗号分隔(除非少于4位数字)</p><h5 id="输入规范"><a href="#输入规范" class="headerlink" title="输入规范"></a>输入规范</h5><p>每个输入文件包含一个测试用例。每个测试用例包含一对整数a和b，其中a和b的数据范围位-10^6^ &lt;&#x3D; a, b &lt;&#x3D; 10^6^.数字用空格隔开。</p><h5 id="输出规范"><a href="#输出规范" class="headerlink" title="输出规范"></a>输出规范</h5><p>对于每个测试用例，你应该在一行输出a+b的和。计算的和必须以规定的标准格式书写。</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">-1000000</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h6 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">-999</span>,<span class="hljs-number">991</span><br></code></pre></td></tr></table></figure><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; a &gt;&gt; b) &#123;<br>        <span class="hljs-type">int</span> sum = a + b;<br>        <span class="hljs-type">bool</span> sign = <span class="hljs-literal">true</span>;       <span class="hljs-comment">//表示正数</span><br>        <span class="hljs-keyword">if</span>(!sum) &#123;<br>            cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(sum &lt; <span class="hljs-number">0</span>) &#123;<br>            sign = <span class="hljs-literal">false</span>;<br>            sum = -sum;<br>        &#125;<br>        string str = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span>(sum) &#123;<br>            str += (sum % <span class="hljs-number">10</span>) + <span class="hljs-string">&#x27;0&#x27;</span>;<br>            sum /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!sign) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;-&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = str.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            cout &lt;&lt; str[i];<br>            <span class="hljs-keyword">if</span>(i &amp;&amp; i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span>;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT甲级_1010</title>
    <link href="/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1010/"/>
    <url>/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1010/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT甲级_1008(Elevator)</title>
    <link href="/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1008/"/>
    <url>/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1008/</url>
    
    <content type="html"><![CDATA[<h4 id="1008-电梯"><a href="#1008-电梯" class="headerlink" title="1008 电梯"></a>1008 电梯</h4><p>我市最高的建筑只有一部电梯。给定一个由N个正整数组成的请求列表。这些数字表示电梯将按指定顺序停在哪一楼层。电梯上移一层需要6秒，下移一层需要4秒。且电梯每停一次需要停留5秒。<br>对于给定的请求列表，你需要计算完成列表中的所有请求花费的总时间。电梯一开始停留在第0层，在完成所有请求后不需要返回底层。</p><h5 id="输入规范"><a href="#输入规范" class="headerlink" title="输入规范"></a>输入规范</h5><p>每个输入文件包含一个测试用例。每个用包含一个正整数N和N个正整数。输入所有数字小于100.</p><h5 id="输出规范"><a href="#输出规范" class="headerlink" title="输出规范"></a>输出规范</h5><p>对于每个测试用例，在一行中打印总时间。</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">41</span><br></code></pre></td></tr></table></figure><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>需要注意的是如果两次连续的请求在同一层，也需要停留5秒。</p><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;      <span class="hljs-comment">//电梯当前所在层数</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;    <span class="hljs-comment">//总时间</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">if</span>(x &gt; t) &#123;     <span class="hljs-comment">//上楼</span><br>            sum += (x - t) * <span class="hljs-number">6</span> + <span class="hljs-number">5</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &lt; t) &#123;   <span class="hljs-comment">//下楼</span><br>            sum += (t - x) * <span class="hljs-number">4</span> + <span class="hljs-number">5</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;         <span class="hljs-comment">//当前层，(话说都在这一层了还坐电梯，^0^)</span><br>            sum += <span class="hljs-number">5</span>;<br>        &#125;<br>        t = x;<br>    &#125;<br>    cout &lt;&lt; sum &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT甲级_1009(Product of Polynomials)</title>
    <link href="/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1009/"/>
    <url>/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1009/</url>
    
    <content type="html"><![CDATA[<h4 id="1009-多项式乘积"><a href="#1009-多项式乘积" class="headerlink" title="1009 多项式乘积"></a>1009 多项式乘积</h4><p>这次，你应该求出多项式A和B的乘积(A*B)</p><h5 id="输入规范"><a href="#输入规范" class="headerlink" title="输入规范"></a>输入规范</h5><p>每个输入文件包含一个测试用例。每个测试用例占行，每行包含一个多项式的信息：<br>K N<del>1</del> a<del>N1</del> N<del>2</del> a<del>N2</del> … N<del>K</del> a<del>NK</del><br>其中K表示多项式中非零项的个数，N<del>i</del>和a<del>Ni</del>(i &#x3D; 1, 2, 3, …, K)分别表示指数和系数。它们的范围位1 &lt;&#x3D; K &lt;&#x3D; 10, 0 &lt;&#x3D; N<del>K</del> &lt; … &lt; N<del>2</del> &lt; N<del>1</del> &lt;&#x3D; 1000。</p><h5 id="输出规范"><a href="#输出规范" class="headerlink" title="输出规范"></a>输出规范</h5><p>对于每个测试用例，你应该按照输入的格式在一行中输出A和B的乘积。注意一行的末尾没有多余的空格。请保留小数点后一位。</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">2.4</span> <span class="hljs-number">0</span> <span class="hljs-number">3.2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">1.5</span> <span class="hljs-number">1</span> <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><h5 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">3.6</span> <span class="hljs-number">2</span> <span class="hljs-number">6.0</span> <span class="hljs-number">1</span> <span class="hljs-number">1.6</span><br></code></pre></td></tr></table></figure><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>模拟多项式计算过程。需要注意的是给定的多项式指数不超过1000，但是求解A*B时指数相加，答案应该时不超过2000。所以开答案数组应该开到2000大小。</p><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1005</span>;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">double</span>&gt; p[MAXN];  <span class="hljs-comment">//保存第一个多项式</span><br><span class="hljs-type">double</span> res[MAXN];       <span class="hljs-comment">//保存答案，res[i]表示系数为i的指数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//输入第一个多项式</span><br>    <span class="hljs-type">int</span> k1;<br>    cin &gt;&gt; k1;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k1; i++) &#123;<br>        cin &gt;&gt; p[i].first &gt;&gt; p[i].second;<br>    &#125;<br>    <br>    <span class="hljs-comment">//输入第二个多项式</span><br>    <span class="hljs-type">int</span> k2;<br>    cin &gt;&gt; k2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k2; i++) &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-type">double</span> a;<br>        cin &gt;&gt; n &gt;&gt; a;<br>        <span class="hljs-comment">//求解</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k1; j++) &#123;<br>            res[p[j].first+n] += a * p[j].second;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXN; i++) &#123;<br>        <span class="hljs-keyword">if</span>(res[i] != <span class="hljs-number">0</span>) &#123;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!cnt) &#123;<br>        cout &lt;&lt; cnt &lt;&lt; endl;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; cnt;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = MAXN - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span>(res[i] != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d %.1lf&quot;</span>, i, res[i]);<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; endl;   <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT甲级_1007(Maximum Subsequence Sum)</title>
    <link href="/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1007/"/>
    <url>/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1007/</url>
    
    <content type="html"><![CDATA[<h4 id="1007-最大子序列和"><a href="#1007-最大子序列和" class="headerlink" title="1007 最大子序列和"></a>1007 最大子序列和</h4><p>给定一个包含K个整数的序列{N<del>1</del>，N<del>2</del>，…，N<del>K</del>}。定义连续子序列为{N<del>i</del>，N<del>i+1</del>，…，N<del>j</del>}，且(<code>1 &lt;= i &lt;= j &lt;= K</code>)。最大子序列是具有最大元素和的连续子序列。例如：序列{-2，11， -4，13，-5，-2}的最大子序列是{11，-4，13}，最大和是20。现在，你应该找到最大和，以及最大子序列的第一个元素和最后一个元素。</p><h5 id="输入规范"><a href="#输入规范" class="headerlink" title="输入规范"></a>输入规范</h5><p>每个输入文件包含一个测试用例。每个测试用例占两行。第一行包含一个正整数K(K&lt;&#x3D;10000)。第二行包含K个用空格分离的数字。</p><h5 id="输出规范"><a href="#输出规范" class="headerlink" title="输出规范"></a>输出规范</h5><p>对于一个测试用例，在一行输出最大和，以及最大子序列的第一个元素值和最后一个元素值。这些数字用空格分隔，但是行末尾元素后不应加空格。当最大子序列不唯一时，输出索引最小的i和j(如案例所示)。如果K个数字都是负数，我们定义最大和为0，你应该输出序列的第一个和最后一个数。</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">10</span><br><span class="hljs-number">-10</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">-5</span> <span class="hljs-number">-23</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">-21</span><br></code></pre></td></tr></table></figure><h5 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">10</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">10005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> value[MAXN];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n; <br>    cin &gt;&gt; n;<br>    <span class="hljs-type">bool</span> sign = <span class="hljs-literal">true</span>;   <span class="hljs-comment">//记录是否有正数，如果有，则为false</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; value[i];<br>        <span class="hljs-keyword">if</span>(value[i] &gt;= <span class="hljs-number">0</span>) &#123;<br>            sign = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(sign) &#123;  <span class="hljs-comment">//特殊情况，K个数字全为负数</span><br>       cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; value[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; value[n<span class="hljs-number">-1</span>] &lt;&lt; endl;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> max_sum = -INF;     <span class="hljs-comment">//最大子序列和</span><br>        <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>, end = <span class="hljs-number">0</span>; <span class="hljs-comment">//子序列的开始和结束位置索引</span><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;     <span class="hljs-comment">//t保存当前计算的序列的开始位置</span><br>            sum += value[i];    <br>            <span class="hljs-keyword">if</span>(max_sum &lt; sum) &#123; <span class="hljs-comment">//如果当前子序列和大于以前计算的子序列和，则更新答案</span><br>                max_sum = sum;<br>                start = t;<br>                end = i;<br>            &#125;   <br>            <span class="hljs-keyword">if</span>(sum &lt; <span class="hljs-number">0</span>) &#123;       <span class="hljs-comment">//如果当前子序列和小于0，则下一个计算的子序列不可能接在当前子序列后面(负数+X &lt; X)</span><br>                sum = <span class="hljs-number">0</span>;<br>                t = i<span class="hljs-number">+1</span>;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; max_sum &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; value[start] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; value[end] &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT甲级_1006(Sign In and Sign Out)</title>
    <link href="/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1006/"/>
    <url>/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1006/</url>
    
    <content type="html"><![CDATA[<h4 id="1006-签到和签退"><a href="#1006-签到和签退" class="headerlink" title="1006 签到和签退"></a>1006 签到和签退</h4><p>每天一开始，第一个在到机房签到的人会打开门，最后一个离开机房签退的人会锁上门。根据签到和签退的记录，你应该找到那天开门和锁门的人。</p><h5 id="输入规范"><a href="#输入规范" class="headerlink" title="输入规范"></a>输入规范</h5><p>每个输入文件包含一个测试用例。每个用例都有一天的记录。用例以正整数M开头，M是记录总数，后跟M行，格式如下：<br><code>ID_number Sign_in_time Sign_out_time</code><br>其中时间以<code>HH:MM:SS</code>格式给出，<code>ID_number</code>是一个不超过15个字符的字符串。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>对于每个测试用例，在一行中输出当天开门和锁门的人员的ID_number。这两个ID_number必须用一个空格隔开。</p><p>注意：保证记录一致。也就是说，每个人的签到时间必须早于签退时间，并且没有两个人同时签到或签退。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">3</span><br>CS301111 <span class="hljs-number">15</span>:<span class="hljs-number">30</span>:<span class="hljs-number">28</span> <span class="hljs-number">17</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span><br>SC3021234 <span class="hljs-number">0</span>8:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-number">11</span>:<span class="hljs-number">25</span>:<span class="hljs-number">25</span><br>CS301133 <span class="hljs-number">21</span>:<span class="hljs-number">45</span>:<span class="hljs-number">00</span> <span class="hljs-number">21</span>:<span class="hljs-number">58</span>:<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">SC3021234 CS301133<br></code></pre></td></tr></table></figure><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>输入时间时可以选择使用C语言的输入函数，如<code>scanf(&quot;%d:%d:%d&quot;, &amp;s, &amp;h, &amp;s)</code>。<br>计算最早与最晚时间时可以选择将时间转变为<code>秒</code>为单位，然后再进行比较，会更简单。</p><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> + <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin &gt;&gt; m;<br>    string st_name, ed_name;<br>    <span class="hljs-type">int</span> start = INF;<br>    <span class="hljs-type">int</span> end = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        string name;<br>        <span class="hljs-type">int</span> sh, sm, ss, eh, em, es;<br>        cin &gt;&gt; name;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d:%d:%d %d:%d:%d&quot;</span>, &amp;sh, &amp;sm, &amp;ss, &amp;eh, &amp;em, &amp;es);<br>        <span class="hljs-type">int</span> st = sh * <span class="hljs-number">3600</span> + sm * <span class="hljs-number">60</span> + ss;<br>        <span class="hljs-type">int</span> ed = eh * <span class="hljs-number">3600</span> + em * <span class="hljs-number">60</span> + es;<br>        <span class="hljs-keyword">if</span>(start &gt; st) &#123;<br>            start = st;<br>            st_name = name;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(end &lt; ed) &#123;<br>            end = ed;<br>            ed_name = name;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; st_name &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; ed_name &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT甲级_1005(Spell It Right)</title>
    <link href="/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1005/"/>
    <url>/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1005/</url>
    
    <content type="html"><![CDATA[<h4 id="1005-拼写正确"><a href="#1005-拼写正确" class="headerlink" title="1005 拼写正确"></a>1005 拼写正确</h4><p>给定一个非负整数N，您的任务是计算N的所有位数之和，并用英语输出总和的每位数字。</p><h5 id="输入规范"><a href="#输入规范" class="headerlink" title="输入规范"></a>输入规范</h5><p>每个输入文件包含一个测试用例。每个案例占用一行，其中包含N（≤10<del>100</del>)</p><h5 id="输出规范"><a href="#输出规范" class="headerlink" title="输出规范"></a>输出规范</h5><p>对于每个测试用例，在一行中输和的没位数的英文单词表示方式。两个连续单词之间必须有一个空格，但行的末尾不能有多余的空格。</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">12345</span><br><br></code></pre></td></tr></table></figure><h5 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">one five<br></code></pre></td></tr></table></figure><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>只需要注意一点就是N的范围，长整型也表示不出来，所以输入字符串。</p><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string value[<span class="hljs-number">10</span>] = &#123;<span class="hljs-string">&quot;zero&quot;</span>, <span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>, <span class="hljs-string">&quot;four&quot;</span>, <span class="hljs-string">&quot;five&quot;</span>, <span class="hljs-string">&quot;six&quot;</span>, <span class="hljs-string">&quot;seven&quot;</span>, <span class="hljs-string">&quot;eight&quot;</span>, <span class="hljs-string">&quot;nine&quot;</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string str;<br>    cin &gt;&gt; str;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        sum += str[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    vector&lt;string&gt; vt;<br>    <span class="hljs-keyword">if</span>(!sum) &#123;<br>        vt.<span class="hljs-built_in">push_back</span>(value[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(sum) &#123;<br>        vt.<span class="hljs-built_in">push_back</span>(value[sum%<span class="hljs-number">10</span>]);<br>        sum /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = vt.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<span class="hljs-comment">//从高位开始一次输出</span><br>        cout &lt;&lt; vt[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//末尾不能有空格</span><br>    cout &lt;&lt; vt[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT甲级_1004(Counting Leaves)</title>
    <link href="/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1004/"/>
    <url>/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1004/</url>
    
    <content type="html"><![CDATA[<h4 id="1004-数叶子"><a href="#1004-数叶子" class="headerlink" title="1004 数叶子"></a>1004 数叶子</h4><p>家族等级关系通常用族谱树表示。你的工作是统计那些没有孩子的家庭成员数目。</p><h5 id="输入规范"><a href="#输入规范" class="headerlink" title="输入规范"></a>输入规范</h5><p>每个输入文件包含一个测试实例。每个用例的首行包含N和M，N表示树中的结点个数（0&lt;N&lt;100），M指非叶结点的个数。然后下面有紧跟M行，每行的格式如下：<br><code>ID K ID[1] ID[2] ...ID[K]</code><br>ID是一个两位的数字，表示一个非叶结点。K表示其孩子的数量。随后是一个序列，序列中是用两位数表示的该结点的孩子ID。为了简单起见，我们把根结点的ID固定为01。<br>输入以N为0结束。此时，这个用例不做处理。</p><h4 id="输出规范"><a href="#输出规范" class="headerlink" title="输出规范"></a>输出规范</h4><p>对于每个测试用例，你应该计算从根节点开始的每层的没有孩子的家庭成员个数。数字必须在一行内输出，且用空格分隔，在每行的结尾不能又多余的空格。</p><p>对于测试样例表示了一个只有两个节点的树，01是根节点，02是01节点的孩子。因此在根节点01层级，没有叶子节点，在下一层级，有一个叶子节点(02)。所以我们在一行内输出“0 1”</p><h5 id="测试样例输入"><a href="#测试样例输入" class="headerlink" title="测试样例输入"></a>测试样例输入</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-number">01</span> <span class="hljs-number">1</span> <span class="hljs-number">02</span><br></code></pre></td></tr></table></figure><h5 id="测试样例输出"><a href="#测试样例输出" class="headerlink" title="测试样例输出"></a>测试样例输出</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>就是建一颗数，计算每一层叶子节点个数。所以我们需要按层次遍历整颗树，而这时候用广度优先搜索会更加方便按层次遍历数。</p><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PP;<br>vector&lt;<span class="hljs-type">int</span>&gt; vt[<span class="hljs-number">105</span>];        <span class="hljs-comment">//vt[i]保存i节点的所有孩子</span><br><span class="hljs-type">int</span> res[<span class="hljs-number">105</span>];               <span class="hljs-comment">//res[i]表示第i层的叶子节点数目</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;        <span class="hljs-comment">//记录层数,根节点在第0层</span><br>    queue&lt;PP&gt; que;      <span class="hljs-comment">//节点队列，保存一个数对，first表示节点编号，second表示层数</span><br>    que.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);   <span class="hljs-comment">//从根节点开始按层次遍历</span><br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>()) &#123;   <br>        PP temp = que.<span class="hljs-built_in">front</span>();  <br>        que.<span class="hljs-built_in">pop</span>();      <br>        <span class="hljs-keyword">if</span>(!vt[temp.first].<span class="hljs-built_in">size</span>())&#123; <span class="hljs-comment">//如果该节点没有孩子，则证明是叶子节点</span><br>            res[temp.second]++;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vt[temp.first].<span class="hljs-built_in">size</span>(); i++)&#123;     <span class="hljs-comment">//压入该节点的所有孩子节点，层数为该层+1</span><br>                que.<span class="hljs-built_in">push</span>(&#123;vt[temp.first][i], temp.second<span class="hljs-number">+1</span>&#125;);<br>            &#125;<br>            cnt = temp.second<span class="hljs-number">+1</span>;    <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> d, k;<br>        cin &gt;&gt; d &gt;&gt; k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++) &#123;<br>            <span class="hljs-type">int</span> td;<br>            cin &gt;&gt; td;<br>            vt[d].<span class="hljs-built_in">push_back</span>(td);    <span class="hljs-comment">//压入节点d的所有孩子</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以上为输入处理部分</span><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-built_in">bfs</span>() + <span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt<span class="hljs-number">-1</span>; i++) &#123;<br>         cout &lt;&lt; res[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>     &#125;<br>    cout &lt;&lt; res[cnt<span class="hljs-number">-1</span>] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT甲级_1003(Emergency)</title>
    <link href="/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1003/"/>
    <url>/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1003/</url>
    
    <content type="html"><![CDATA[<h4 id="1003-紧急事件"><a href="#1003-紧急事件" class="headerlink" title="1003 紧急事件"></a>1003 紧急事件</h4><p>作为一个城市的紧急救援队队长，你会得到一张你国家的专业地图。这张地图显示了几个通过道路连接起来的分散的城市。地图上标明了每个城市的救援队伍数量和某两个城市之间每条道路的长度。当其他城市的紧急电话打给你时，你的工作就是带领你的人尽快赶到那里，同时，在路上尽可能多的招集路过城市的救援队伍。</p><h5 id="输入规范"><a href="#输入规范" class="headerlink" title="输入规范"></a>输入规范</h5><p>每个输入文件包含一个测试用例。对于每个测试用例，第一行包含4个正整数：N表示城市数量(N &lt;&#x3D; 500)（城市编号从0~N-1），M表示道路数，C1和C2分别表示现在所在城市和需要达到救援的城市。接下来的一行包含N个整数，其中第i个整数表示第i个城市的救援队数量。然后接下来跟随的M行，每一行有三个整数：c1,c2和L，它们分别表示两个城市和两城市之间的道路长度。数据保证至少有一条路径从C1到C2.</p><h5 id="输出规范"><a href="#输出规范" class="headerlink" title="输出规范"></a>输出规范</h5><p>对于每个测试用例，在一行中打印两个数字：C1到C2之间的不同路径的最短路径长度个数和最短路径长度的时招集的最多救援对数目。一行中的所有数字必须用一个空格隔开，并且在一行的末尾不允许有多余的空格。</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">2</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>dijkstra算法求单源最短路。在求最短路时更新最短路条数和救援队数目。</p><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">505</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f</span>;<br><span class="hljs-type">int</span> value[MAXN];        <span class="hljs-comment">//value[i]i城市的消防员个数</span><br><span class="hljs-type">int</span> g[MAXN][MAXN];      <span class="hljs-comment">//存储每条边</span><br><br><span class="hljs-type">int</span> dis[MAXN];    <span class="hljs-comment">//dis[i]表示到i的最短路</span><br><span class="hljs-type">bool</span> sign[MAXN];    <span class="hljs-comment">//标记i是否是最短路</span><br><span class="hljs-type">int</span> cnt1[MAXN];     <span class="hljs-comment">//cnt1[i]表示到i时的最短路个数</span><br><span class="hljs-type">int</span> cnt2[MAXN];     <span class="hljs-comment">//cnt2[i]表示到i时的最短路的最多招集人数(不包含i城市的救援人数)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> st, <span class="hljs-type">int</span> n)</span> </span>&#123;      <span class="hljs-comment">//dijkstra求单源最短路</span><br>    <span class="hljs-built_in">memset</span>(dis, INF, <span class="hljs-built_in">sizeof</span>(dis));<br>    dis[st] = <span class="hljs-number">0</span>;<br>    cnt1[st] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++) &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span>(!sign[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dis[t] &gt; dis[j])) &#123;<br>                t = j;<br>            &#125;<br>        &#125;<br>        sign[t] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span>(t != j &amp;&amp; dis[j] &gt;= dis[t] + g[t][j]) &#123;<br>                <span class="hljs-keyword">if</span>(dis[j] == dis[t] + g[t][j]) &#123;<br>                    cnt1[j] += cnt1[t];     <span class="hljs-comment">//表示有不同路径，但相同路径长的路径</span><br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    cnt1[j] = cnt1[t];<br>                &#125;<br>                cnt2[j] = <span class="hljs-built_in">max</span>(cnt2[j], cnt2[t] + value[t]);     <span class="hljs-comment">//更新最最多招集人数</span><br>                dis[j] = dis[t] + g[t][j];              <span class="hljs-comment">//找到一个最短点，更新其他其到起点路径</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(g, INF, <span class="hljs-built_in">sizeof</span>(g));<br>    <span class="hljs-type">int</span> n, m, c1, c2;   <span class="hljs-comment">//城市数、道路数、出发地、目的地</span><br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; c1 &gt;&gt; c2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        g[i][i] = <span class="hljs-number">0</span>;<br>        cin &gt;&gt; value[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, l;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; l;<br>        g[a][b] = l;<br>        g[b][a] = l;<br>    &#125;<br>    <span class="hljs-built_in">dijkstra</span>(c1, n);<br>    <span class="hljs-comment">//输出最多招集的救援人数时应加上本城市救援人数</span><br>    cout &lt;&lt; cnt1[c2] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; cnt2[c2]+value[c2] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT甲级_1002(A+B for Polynomials )</title>
    <link href="/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1002/"/>
    <url>/2024/12/17/PAT%E7%94%B2%E7%BA%A7-1002/</url>
    
    <content type="html"><![CDATA[<h4 id="1002-A-B多项式"><a href="#1002-A-B多项式" class="headerlink" title="1002 A+B多项式"></a>1002 A+B多项式</h4><p>这一次，你需要找到A+B的和，其中A和B的两个多项式。</p><h5 id="输入规范"><a href="#输入规范" class="headerlink" title="输入规范"></a>输入规范</h5><p>每个输入文件包含一个测试用例。每个用例占有2行，每行包含一个多项式信息K N<del>1</del> a<del>N1</del> N<del>2</del> a<del>N2</del> … N<del>K</del> a<del>NK</del>.其中K表示多项式中非零项个数，N和a<del>Ni</del>（i &#x3D; 1, 2, 3, …K）分别表示指数和系数。它们的取值范围为1&lt;&#x3D; K &lt;&#x3D; 10, 0 &lt;&#x3D; N<del>K</del> &lt; … &lt; N<del>2</del> &lt; N<del>1</del>  &lt;&#x3D; 1000</p><h5 id="输出规范"><a href="#输出规范" class="headerlink" title="输出规范"></a>输出规范</h5><p>对于每个测试用例你应该按照输入的格式在一行输出A和B的和。需要注意的式一行的结束没有多余的空格。请青雀到小数点后1位。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">2 1 2.4 0 3.2<br>2 2 1.5 1 0.5<br></code></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1.5</span> <span class="hljs-number">1</span> <span class="hljs-number">2.9</span> <span class="hljs-number">0</span> <span class="hljs-number">3.2</span><br></code></pre></td></tr></table></figure><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">double</span> value[<span class="hljs-number">1005</span>];<span class="hljs-comment">//value[i]表示指数位i的系数和位多少</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-type">double</span> a;<br>        cin &gt;&gt; n &gt;&gt; a;<br>        value[n] += a;<br>    &#125;<br>    cin &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-type">double</span> a;<br>        cin &gt;&gt; n &gt;&gt; a;<br>        value[n] += a;<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1005</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(value[i] != <span class="hljs-number">0</span>) &#123;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1004</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span>(value[i] != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d %.1lf&quot;</span>, i, value[i]);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机证书</tag>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件项目管理</title>
    <link href="/2024/11/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    <url>/2024/11/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="1-项目与项目管理"><a href="#1-项目与项目管理" class="headerlink" title="1.项目与项目管理"></a>1.项目与项目管理</h4><h6 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h6><p>&nbsp;&nbsp;&nbsp;1.<strong>项目</strong>：项目是一次性的、以目标为导向的（目标明确）、通过项目经理及其团队工作完成的、存在大量的变更管理。<br>&nbsp;&nbsp;&nbsp; 2.<strong>项目的特点</strong>：</p><ul><li>有明确的目标性</li><li>明确的时限性</li><li>资源成本的约束性</li><li>项目的不确定性</li><li>唯一性(一次性)<br>3.<strong>项目的定义</strong>：是为了<code>创造</code>一个<code>唯一</code>的产品或提供一个唯一的服务而进行的<code>临时性</code>的活动。</li></ul><h6 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h6><p>1.项目管理通俗理解：假设要做一件事情，有一定的约束和目标要求，诸如时间、资金、人力等条件限制，那么如何在这些约束条件有效地达到我们预想地目标，通过相关的理念、技术方法和工具进行管理的过程就是项目管理。<br>2.<strong>项目管理的定义</strong>：使项目能够按照预定的<code>成本</code>、<code>进度</code>、<code>质量</code>顺利完成让所有<code>干系人</code>（相关的人）得到满意，而对<code>成本</code>、<code>人员</code>、<code>进度</code>、<code>质量</code>、<code>风险</code>等进行分析和管理的活动。</p><h4 id="2-项目管理框架"><a href="#2-项目管理框架" class="headerlink" title="2.项目管理框架"></a>2.项目管理框架</h4><h6 id="五大标准化过程组"><a href="#五大标准化过程组" class="headerlink" title="五大标准化过程组"></a>五大标准化过程组</h6><p><img src="https://i-blog.csdnimg.cn/blog_migrate/924243360463699371bab0ceb9991c5a.png" alt="在这里插入图片描述"><br>1.<strong>启动阶段</strong>：项目的可行性分析、立项(<del>确定可以做</del>)、招投标、合同签署<br>2.<strong>计划阶段</strong>：范围定义、进度安排、资源计划、成本估计、质量保证计划、风险计划、实施计划等<br>3.<strong>实施及控制阶段</strong>：项目实施、进度控制、费用控制、质量控制、变更控制等<br>4.<strong>结束阶段</strong>：范围确认、质量验收、费用结算与审计、项目资料验收、项目交接与清算、项目审计与评估、项目总结等</p><h6 id="十大知识领域"><a href="#十大知识领域" class="headerlink" title="十大知识领域"></a>十大知识领域</h6><p>1.<strong>项目整合管理</strong><br>2.<strong>项目范围管理</strong><br>3.<strong>项目时间管理</strong><br>4.<strong>项目成本管理</strong><br>5.<strong>项目质量管理</strong><br>6.<strong>项目人力资源管理</strong><br>7.<strong>项目沟通管理</strong><br>8.<strong>项目风险管理</strong><br>9.<strong>项目采购管理</strong><br>10.<strong>项目干系人管理</strong><br><img src="https://i-blog.csdnimg.cn/blog_migrate/cf9de703a6da6d85ae7739161d98ccda.png" alt="在这里插入图片描述"></p><h6 id="四十七个过程"><a href="#四十七个过程" class="headerlink" title="四十七个过程"></a>四十七个过程</h6><p><img src="https://i-blog.csdnimg.cn/blog_migrate/8a584c183ca0f3ed77b656c820da8226.png" alt="在这里插入图片描述"></p><h4 id="3-项目启动"><a href="#3-项目启动" class="headerlink" title="3.项目启动"></a>3.项目启动</h4><p>项目类型：<br>1.合同项目：招投标(<del>招标和投标</del>)、合同谈判、合同签署，甲乙双方有合同约束<br>2.内部项目：确定任务范围和相关人员进行有效地配合，无合同约束<br>3.项目干系人分析：分析确定项目相关人员，包括：项目发起人、项目开发人员、测试人员、维护人员、客户等</p><h6 id="初始化项目分析"><a href="#初始化项目分析" class="headerlink" title="初始化项目分析"></a>初始化项目分析</h6><p>1.<strong>可行性项目分析</strong>：根据市场、技术、人员等各资源分析项目地可行性，对分析结果进行认证讨论。<br>2.<strong>项目范围分析</strong>：确定项目的功能模块、边界范围等<br>3.<strong>项目干系人分析</strong>：分析确定项目相关人员，包括：项目发起人、项目开发人员、测试人员、维护人员、客户等</p><h6 id="生存期模型-常用"><a href="#生存期模型-常用" class="headerlink" title="生存期模型(常用)"></a>生存期模型(常用)</h6><p>1.<strong>瀑布模型</strong>：通过设计一系列阶段<code>顺序</code>展开的，从系统需求分析开始直到产品发布和维护，每个阶段都会产生循环反馈，因此，如果有信息未被覆盖或者发现了问题，那么最好“返回”上一个阶段并进行适当的修改，项目开发进程从一个阶段“流动”到下一个阶段。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/35b75e6e08b243935f6b3db021b42043.png" alt="在这里插入图片描述"><br>瀑布模型适合项目的需求很明确、解决方案也很明确的短期项目。<br>2.<strong>原型模型</strong>：原型模型即样品模型，先借用已有系统作为原型模型，通过“样品”不断改进，使得最后的产品就是用户所需要的。<br>原型模型采用逐步求精的方法完善原型，使得原型能够“快速”开发，避免了像瀑布模型一样在冗长的开发过程种难以对用户的反馈做出快速的响应。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/819e38366d6a3d6fef2d9ff531764264.png" alt="在这里插入图片描述"><br>原型模型适用于在项目开始前，项目的需求不明确的的项目。<br>3.<strong>增量模型</strong>：增量模型融合了瀑布模型的基本成分(重复应用)和原型实现的迭代特征，该模型采用随着日程时间的进展而交错的线性序列，每一个线性序列产生软件的一个可发布的“增量”。当使用增量模型时，第1个增量往往是核心的产品，即第1个增量实现了基本的需求，但很多补充的特征还没有发布。客户对每一个增量的使用和评估都作为下一个增量发布的新特征和功能，这个过程在每一个增量发布后不断重复，直到产生了最终的完善产品。</p><blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/52235f6f8b004c68b59ab9fe02e9a249.png" alt="在这里插入图片描述"></p></blockquote><p>增量模型适用于在项目开始前，明确了需求的一部分，但是需求可能会发生变化、对于时常和用户把握不是很准，需要逐步了解、对于有庞大和复杂功能的系统进行功能改进，就需要一步一步实施的项目。</p><h6 id="项目立项"><a href="#项目立项" class="headerlink" title="项目立项"></a>项目立项</h6><p>1.<strong>项目经理的角色</strong>：项目组织的领导者、管理者、决策者、分析者、计划者、控制者、组织者、评价者、协调者。<br>2.<strong>项目经理的责任</strong>：项目计划；组织实施；项目控制<br>3.<strong>项目立项(相关文档)</strong><br>—-&gt;项目章程：确认项目存在的文件，包括对项目的确认、对项目经理的授权和项目目标的概述等<br>—-&gt;项目立项申请报告：明确项目的目标、时间、项目使用的资源和经费，而且得到执行该项目经理和项目发起人的认可<br>—-&gt;召开项目立项会：通常由公司PMO(项目管理办公室)组成立项会，对项目调研、范围、项目经理等进行确定授权、评审，最后要有评审报告</p><h4 id="4-项目计划"><a href="#4-项目计划" class="headerlink" title="4.项目计划"></a>4.项目计划</h4><p>项目计划包括：范围计划、进度计划、成本计划、质量计划、人力资源计划、沟通计划、风险计划</p><blockquote><p>项目计划的重要性：<img src="https://i-blog.csdnimg.cn/blog_migrate/76995f991f2cae81e4f7c432086714e2.png" alt="在这里插入图片描述"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/61b11945628e2277194e4d78c269b37a.png" alt="在这里插入图片描述"></p></blockquote><h6 id="范围计划"><a href="#范围计划" class="headerlink" title="范围计划"></a>范围计划</h6><p>项目范围的管理是对项目应该包括什么和不包括什么进行相应的定义和控制。它包括用以保证项目能按要求的范围完成所涉及的所有过程，包括：确定项目的需求、定义规划项目的范围、范围管理的实施、范围的变更控制管理以及范围的合适。</p><blockquote><p><strong>WBS任务分解</strong><br>WBS(工作分解结构)就是将一个项目按一定的原则分解，项目分解成任务，任务再分解成一项项的工作，再把每一项工作分配到每个人的日常活动种，直到分解不下去为止<br>即：项目—&gt;任务—–&gt;工作—–&gt;日常活动<br>工作分解结构以交付成果为导向对项目要素进行的分组，它归纳和定义了项目的整个工作范围，每下降一层代表对项目工作的更详细定义。<br>WBS总是处于计划过程的中心，也是制动进度计划、资源需求、成本预算、风险管理计划和采购计划等的重要基础。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d32ad2fc827b132898993ae5c3155b83.png" alt="在这里插入图片描述"><br><strong>工作包</strong>：WBS最底层的项目可交付成果称为工作包(<del>不能再细分的任务</del>)<br>工作包特定：<br>1.工作包可以分配给另一位项目经理进行计划和执行<br>2.工作包可以通过项目的方式进一步分解为子项目的WBS<br>3.工作包可以由唯一的一个部门或承包商负责。用于在组织之外分包时，称为委托包。<br>工作包的定义应考虑80小时或两周法则，即任何工作包的完成时间应当不超过80小时。在每个80小时或少于80小时结束时，只报告该工作包是否完成。通过这种定期检查的方法，可以控制项目的变化。<br><strong>任务分解原则</strong><br>1.将主题目标逐步细化分解，最底层的日常活动可直接分派到个人去完成<br>2.每个任务原则上要求分解到不能再细分为止<br>3.日常活动要对应到人、时间和资金投入<br><strong>任务分解标准</strong><br>1.分解后的活动结构清晰，从树根到树叶一目了然，尽量避免盘根错节<br>2.逻辑上形成一个大的活动，集成了所有的关键因素包含临时的里程碑和监控点，所有活动全部定义清楚，要细化到人、时间和资金投入<br><strong>WBS任务分解实例</strong><br><img src="https://i-blog.csdnimg.cn/blog_migrate/8d6368cbd4b087c3443090000ddf3c4d.png" alt="在这里插入图片描述"></p></blockquote><h6 id="进度计划"><a href="#进度计划" class="headerlink" title="进度计划"></a>进度计划</h6><p>进度是对执行的活动和里程碑指定的工作计划日期表。<br>进度管理是为了确保项目按期完成所需要的过程。<br>按时完成项目是项目经理最大的挑战之一。<br>时间是项目规划种灵活性最小的因素。(<del>时间问题不可商量</del>)<br>进度问题是项目冲突的主要原因，尤其子啊项目的后期。<br>1.进度计划管理过程<br>—-&gt;<strong>活动定义</strong>：确定为完成项目的各个交付成果所必须的诸项具体活动<br>—-&gt;<strong>活动排序</strong>：去欸的那个任务依赖、前置任务、里程碑(里程碑显示项目进展种的重大工作完成)<br>—-&gt;<strong>活动历时估计</strong>：每个任务的历时估计、项目总历时估计，可采用定额算法、经验算法<br>—-&gt;<strong>任务资源估计</strong>：每个任务需要的资源类型和数量有一定的考虑，这些资源包括：人力资源、设备资源、其他资料资源<br>2.<strong>关键路径</strong>：关键路径是项目计划中最长的路线。它决定了项目的总实耗时间。项目经理必须把注意力集中于优先等级最高得任务，确保它们准时完成，关键路径上得任何活动得推迟将使整个项目推迟。向关键路径要时间，向非关键路径要资源。所以再进行项目操作的时候确定关键路径并进行有效的管理是至关重要的。<br>3.<strong>里程碑</strong>：在进度时间表上设立一些重要的事件检查点，这样一来，就可以在项目执行过程中利用这些重要的时间检查点来对项目的进度进行检查和控制。这些重要的时间检查点被称作项目的里程碑。</p><h6 id="成本计划"><a href="#成本计划" class="headerlink" title="成本计划"></a>成本计划</h6><p>1.<strong>资源计划编制</strong>：确定项目需要的资源种类和数量<br>2.<strong>成本估算</strong>：编制一个为完成项目各活动所需要的资源成本的近似估算<br>3.<strong>软件项目规模</strong>：软件项目规模即工作量，是从如软件项目范围中抽出的软件功能，然后确定每个软件功能所必须执行的一系列软件工程任务。包括：软件规划，软件管理，需求，设计，编码，测试以及后期的维护等任务<br>4.<strong>规模的单位</strong>：<br>—-&gt;LOC(Loc of Code):源代码程序长度的测量，单位K代码行<br>—-&gt;FP(Function Point):用系统的功能数量来测量<br>—-&gt;人月(一人在一月完成的功能月)<br>—-&gt;人天<br>—-&gt;人年<br>5.软件的规模和成本的关系：规模是成本的而主要因素，是成本估算的基础<br>6.估算：算法不是很准确的，有误差的；经验(历史)数据非常重要；不要太迷信数学模型<br>7.成本估算：直接估算(与具体项目相关的成本)；简介成本(不能具体到某个项目中的成本，可以分摊到各个具体项目中的成本，例如培训、房租水电、员工福利等)</p><h6 id="质量计划"><a href="#质量计划" class="headerlink" title="质量计划"></a>质量计划</h6><p>1.质量的多种定义：</p><ol><li>符合目的或者用途</li><li>用户的感觉就是质量</li><li>符合顾客在其合理价格下对产品的要求</li><li>产品或者服务满足明确和隐含需要能力的性能特性的总体<br>2.<strong>质量定义</strong>：质量是满足要求的程度，包括符合规定的要求和满足顾客的需求<br>  3.<strong>软件质量</strong>：软件满足明确说明或者隐含的需求的程度。如：<br>  —-&gt;明确说明：查询功能<br>  —-&gt;隐含说明：查询速度<br>  4.质量的重要性：软件危机的主要矛盾；低质量的软件就像定时炸弹；低质量的产品增加成本；质量是生命也是信誉<br>  5.<strong>质量管理过程</strong>：<br>  <img src="https://i-blog.csdnimg.cn/blog_migrate/6cbd2b35445ffea88bf75fc2a0faf7bd.png" alt="在这里插入图片描述"><br> 6.质量保证：确定项目应达到的质量标准；决定如何满足质量标准的计划安排和方法；通过评价项目整体效绩，建立对质量要求的新人；提供项目和产品可视化的管理报告<br> 7.<strong>代码质量活动</strong><br> —-&gt;<strong>静态分析</strong>：不实际运行程序，而是通过检查和阅读等手段来发现错误并评估代码质量的软件测试技术。也称为静态测试技术。<br> —-&gt;<strong>动态测试</strong>：单元测试、集成测试、系统测试<br> —-&gt;<strong>缺陷追踪</strong>：使用项目管理工具(如ClearQuest)跟踪缺陷解决程度<br> 8.需要有质量计划文档</li></ol><h6 id="人力资源计划"><a href="#人力资源计划" class="headerlink" title="人力资源计划"></a>人力资源计划</h6><p>1.<strong>组织结构的主要类型</strong>:职能型;项目型;矩阵型</p><blockquote><p><strong>职能型</strong><br><img src="https://i-blog.csdnimg.cn/blog_migrate/b802a3b596e9952c46b6bd7e67a76b82.png" alt="在这里插入图片描述"><br>优点：<br>1.可以充分发挥职能部门的资源集中优势<br>2.部门的专家可以同时为部门内不同项目使用<br>3.便于相互交流，相互支援<br>4.可以随时增派人员<br>5.可以将项目和本部门的职能工作融为一体<br>缺点：<br>1.项目和部门发生利益冲突，职能部门更重视本部门的目标、会忽视项目目标<br>2.资源平衡会出现问题<br>3.权力分隔不利于各个职能部门的交流和团结协作<br>4.行政隶属关系使得项目经理没有充足的权利</p></blockquote><blockquote><p><strong>项目型</strong><br><img src="https://i-blog.csdnimg.cn/blog_migrate/3008af38737e631b1e1e4a45cfafc798.png" alt="在这里插入图片描述"><br>优点：<br>1.项目经理对项目可以负全责<br>2.项目目标单一，可以以项目为中心，有利于项目顺利进行<br>3.避免多重领导<br>4.组织结构简单，交流简单，快速<br>缺点：<br>1.资源不能共享<br>2.各个独立的项目处于相对封闭状态，不利于公司政策的贯彻<br>3.对项目组织的成员缺少一种事业上的连续性和安全感<br>4.项目组织之间处于分隔状态，缺少信息交流</p></blockquote><blockquote><p><strong>矩阵型</strong><br><img src="https://i-blog.csdnimg.cn/blog_migrate/294e5db27c714204c53045ad3052e038.png" alt="在这里插入图片描述"><br>优点：<br>1.专职的项目经理负责整个项目，以项目为中心<br>2.公司的多个项目可以共享各个职能部门的资源<br>3.即利于项目目标的实现，又利于公司目标方针的贯彻<br>4.项目成员的顾虑减少了<br>缺点：<br>1.容易引起职能经理和项目经理权力的冲突<br>2.资源共享也能引起项目之间的冲突<br>3.项目成员有多头领导</p></blockquote><p>2.人员管理计划：人员管理计划描述了项目团队的组织结构，团队成员及角色、成员加入到团队和离开团队的时间、人员培训计划等。作为项目计划一部分，详细程度因项目而异。</p><h6 id="沟通计划"><a href="#沟通计划" class="headerlink" title="沟通计划"></a>沟通计划</h6><p>1.基本原则：及时性；准确性；完整性；可理解性<br>2.沟通方式：书面沟通和口头沟通；语言沟通和非语言沟通(UML)；正式沟通和非正式沟通；单向沟通和双向沟通；网络沟通<br>3.沟通计划编制：<strong>沟通需求分类</strong>；沟通的内容；沟通方法；沟通职责；沟通进度；沟通计划维护</p><h5 id="风险计划"><a href="#风险计划" class="headerlink" title="风险计划"></a>风险计划</h5><p>1.定义：损失发生的不确定性；对潜在，未来可能发生的损害的一种度量<br>2.风险的三要素：一个事件；事件发生的概率；事件的影响<br>3.风险类型<br>—-&gt;预测角度：已知风险；可预测风险；不可预测风险<br>—-&gt;范围角度：项目风险；技术风险；商业风险<br>4.风险管理的四个过程：风险识别—-&gt;风险评估—-&gt;风险规划—–&gt;风险控制—–&gt;风险识别<br>5.<strong>风险识别</strong>：<br>—-&gt;风险识别领域：产品规模；商业影响；客户相关；过程定义；开发技术；开发环境；人员数目及经验<br>—-&gt;识别方法(结合使用)：头脑风暴法；情景分析法；面谈法；风险条目检查表<br>6.<strong>风险评估</strong>：确定风险发生<code>概率</code>的估计和评价，项目风险<code>后果</code>严重程度的估计和评价，项目风险影响范围的分析和评价，以及对项目风险发生时间的估计和评价<br>7.<strong>风险规划</strong><br>—-&gt;风险概率值：没有可能(0)；确定(1)<br>—-&gt;风险概率度量：高、中、低；极高、高、中、低、极低；不可能、不一定、可能和极可能等等<br>8.<strong>风险后果</strong>：风险影响项目目标的严重程度；从无影响到无穷大<br>—-&gt;风险后果度量：高、中、低；极高、高、中、低、极低；灾难、严重、轻微、可忽略等等<br>8.<strong>风险控制</strong>：针对风险分析的结果，为提高实现项目目标的机会，降低风险的负面影响而指定风险应对策略和应对措施的过程，即指定一定的行动和策略来对付、减少、以至于消灭风险事件<br>9.<strong>风险措施</strong><br>—-&gt;<strong>回避风险</strong>：对所有可能发生的风险尽可能的规避，采用主动放弃或者拒绝使用导致风险的方案。例如采用新技术<br>—-&gt;<strong>转移风险</strong>：为了避免承担风险损失，有意识将损失或与损失有关的财务后果转嫁出去的方法。例如出售、分包。<br>—-&gt;<strong>损失控制</strong>：损失预防、损失抑制<br>—-&gt;<strong>自留风险</strong>：由项目组织自己承担风险事故所致损失的措施</p><h4 id="5-项目实施与控制"><a href="#5-项目实施与控制" class="headerlink" title="5.项目实施与控制"></a>5.项目实施与控制</h4><p>项目实施与控制—-&gt;配置管理—-&gt;需求分析—-&gt;系统设计—-&gt;系统开发—-&gt;系统测试</p><h6 id="项目实施与控制"><a href="#项目实施与控制" class="headerlink" title="项目实施与控制"></a>项目实施与控制</h6><p>1.项目实施与控制核心：<code>产品规格/质量</code>，<code>进度</code>，<code>成本</code><br>2.项目跟踪控制过程：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/460048aa1180a8054f25f650a310bce7.png" alt="在这里插入图片描述"><br>3.项目跟踪控制程度：项目中可以接受出现偏差；注意力应放在紧急的必须要解决的问题上。<br>参与项目进展报告，周例会会议纪要。(控制项目进度)</p><h6 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h6><p>软件项目中可能遇到如下问题：</p><ul><li>找不到某个文件的历史版本</li><li>开发人员使用错误的版本修改程序</li><li>开发人员未经授权修改代码或文档</li><li>人员流动，交接工作不彻底</li><li>已修复的Bug在新版本中出现</li><li>无法重新编译某个历史版本</li><li>因协同开发中，或者异地开发，版本变更混乱导致整个项目失败<br><strong>配置管理定义</strong>：记录软件产品的演化过程；确保软件开发者在软件生命周期中的各个阶段都能得到精确的产品配置；最终保证软件产品的<code>完整性</code>，<code>一致性</code>，<code>追溯性</code>，<code>可控性</code><br><strong>作用</strong>：版本管理、变更管理<br><strong>配置项</strong>：软件配置项是项目定义其受控于软件配置管理的款项。(即管理内容)包括：系统规格说明书；软件需求规格说明书；设计规格说明书；源代码；测试规格说明书；<br>配置项版本：<img src="https://i-blog.csdnimg.cn/blog_migrate/666097fcc3682c312db1867c12cd50a2.png" alt="在这里插入图片描述"><br>工具：ClearCase、SVN、VSS、CVS等<br>配置管理委员会：配置项标识、跟踪；配置管理环境建立；变更管理；配置状态统计；配置管理计划<br><strong>软件需求</strong>：需求是指用户对软件的功能和性能的要求，就是用户希望软件能做什么事情，完成什么样的功能，达到什么性能。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/52eb72595731a3d7da4471762f8e8a0e.png" alt="在这里插入图片描述"><br><strong>软件需求规格说明书</strong>:需求分析工作完成的一个基本标志是形成了一份完整的、规范的需求规格说明书；需求规格说明书的编制是为了使用户和软件开发者双方对该软件的初始规定有一个共同的理解，实质成为整个软件开发的基础。<br><strong>需求总在变化解决方案</strong>：确定需求变更控制过程；建立需求变更控制委员会(SCCB);进行需求变更你影响分析；跟踪所有收需求变更影响的工作产品；建立需求基准版本和需求控制版本文档；维护需求变更的历史记录；跟踪每项需求的状态；衡量需求稳定性<br><img src="https://i-blog.csdnimg.cn/blog_migrate/2ee0308524ae7edb57844680ad8989db.png" alt="在这里插入图片描述"></li></ul><h6 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h6><p>系统设计包括概要设计和详细设计</p><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>测试包括：单元测试；集成测试；系统测试</p><h4 id="6-项目结束"><a href="#6-项目结束" class="headerlink" title="6.项目结束"></a>6.项目结束</h4><p>项目结束包括项目结束和系统维护两方面<br>1.成功与失败的标准：可交付成果如何；是否实现目标；是否达到项目业主的期望<br>2.制定结束要做的工作：<br>—-&gt;<strong>指定结束计划</strong>(项目计划的一部分，与客户一同评审项目结束计划，细化并实施项目结束计划)<br>—-&gt;完成收尾工作：范围确认，项目验收，费用结算，合同终结<br>—-&gt;项目结束评审(内部评审)：是否实现项目目标，是否遵循项目进度，是否在预算成本内完成项目，项目进度过程中出现的问题以及解决措施是否合适，问题是否得到解决，从该项目的事件中可以得到哪些经验和教训<br>—-&gt;项目总结：总结成功的经验和失败的教训；软件项目历程文件(将项目中的有用信息总结分类，放入信息库，它是软件项目记录的资料)</p><h4 id="7-案例分析"><a href="#7-案例分析" class="headerlink" title="7.案例分析"></a>7.案例分析</h4>]]></content>
    
    
    <categories>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>项目管理</tag>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/18/hello-world/"/>
    <url>/2024/11/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
